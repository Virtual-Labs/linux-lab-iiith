#+TITLE: Introduction to BASH

* What is BASH?

BASH stands for Bourne Again Shell, a command-line interface to most
*nix systems, and is possibly the most widely used of all shells.
BASH was built by incorporating features from ksh(Korn SHELL) and
csh(C shell).


* Configuration files for BASH

Normally, BASH properties can be altered by modifying the contents of
three files, which are usually present in the ~ folder of your system:

- .bashrc
- .bash_profile
- .bash_logout

The .bash_profile file contains the commands that are to be executed
every time you log in to your system
The .bashrc file is the most commonly used file for making
user-specific BASH settings.  
The .bash_logout contains the set of commands that should be executed
when an user logs out of the system.

In this experiment, we will try out some of the features of using BASH
by modifying the .bashrc file.

The complete set of BASH variables can be seen by opening Terminal and
typing env. 

If you have made any changes to .bashrc and want them to be loaded,
type in terminal source .bashrc.

* Set vi mode in BASH

Since a lot of users make use of vi, or Visual, a pretty popular
editor used in *nix systems, BASH can be set to run using vi shortcuts
as well. 

The easiest way to try it out is to open up Terminal, and type:
set -o vi

BASH will then run in the Edit mode of vi. To use the command mode,
just hit Escape.  To go back to the Edit mode, press a or i. 

Similarly, if you are an Emacs user, you can also enable Emacs
shortcuts in BASH.  To do this: type in Terminal: set -o emacs. You
can now use Emacs shortcuts in BASH.

In order to make this permanent, you need to save the command in .bashrc.

* .bash_history
The .bash_history file contains a history of the commands that were
typed in BASH. In order to set the number of commands to be displayed
if you type history in terminal, you can set HISTSIZE=<number> in your .bashrc. The
default value is set to 500.

* Customizing the prompt in BASH

** How to set colors
# Colors
Open your bashrc, and write colors as specified below.
tput is the command that sets the terminal output, setaf is the color
for foreground, setab is for background color.

Black="$(tput setaf 0)"
BlackBG="$(tput setab 0)"
DarkGrey="$(tput bold ; tput setaf 0)"
LightGrey="$(tput setaf 7)"
LightGreyBG="$(tput setab 7)"
White="$(tput bold ; tput setaf 7)"
Red="$(tput setaf 1)"
RedBG="$(tput setab 1)"
LightRed="$(tput bold ; tput setaf 1)"
Green="$(tput setaf 2)"
GreenBG="$(tput setab 2)"
LightGreen="$(tput bold ; tput setaf 2)"
Brown="$(tput setaf 3)"
BrownBG="$(tput setab 3)"
Yellow="$(tput bold ; tput setaf 3)"
Blue="$(tput setaf 4)"
BlueBG="$(tput setab 4)"
LightBlue="$(tput bold ; tput setaf 4)"
Purple="$(tput setaf 5)"
PurpleBG="$(tput setab 5)"
Pink="$(tput bold ; tput setaf 5)"
Cyan="$(tput setaf 6)"
CyanBG="$(tput setab 6)"
LightCyan="$(tput bold ; tput setaf 6)"
NC="$(tput sgr0)" # No Color


** How to display content to launching a terminal
echo -ne "${Red}Hostname:${Cyan}\t\t";hostname;
echo -ne "${Red}Date:${Cyan}\t\t\t"; date; 
echo -ne "${Red}Kernel Information: \t${Cyan}"; uname -ms;
echo -ne "${Red}Uptime(HH:MM):${Cyan}\t\t"; uptime| awk '{print $3}' | sed  's/,//g';
echo -ne "${Red}Processor: ${Cyan}\t\t"; uname -p;
echo -ne "${Red}Number of Processors:${Cyan}\t";cat /proc/cpuinfo | grep processor | wc -l;


** How to edit the prompt
PS1 is the variable that is read for primary prompt. 

PS1='[\[$Black\]\u@\h \[$Red\]\w \[$Black\]$]'


* Aliases

Sometimes, you need to type in a long command quite frequently.  The
way to avoid it is by 'alias'ing the command to a name. 

For example, if you need to type a command very frequently:
 rsync /home/johndoe/data/foo/foo.org /home/janedoe/work/project/bar/

Instead of typing this command every time you need it, or searching it in bash
history, you can alias a command to a name.

alias <alias-name>="command"

 Therefore to set an alias the rsync command to a name copy-foo, we type:

alias copy-foo="rsync /home/johndoe/data/foo/foo.org /home/janedoe/work/project/bar/"

You can now type copy-foo in the terminal instead of the command and
still get the same result.

In order to make this alias permanent (use it even after logging
out/reboots), you can save the alias command in your .bashrc file.

In order to delete a certain alias, type unalias <alias-name> .

If you have saved the alias in your .bashrc, you will first have to
remove the entry from .bashrc and then run the unalias command.


* References
[[http://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/][color link]]
