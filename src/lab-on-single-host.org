#+Title: Hosting Linux Lab on a single host machine
#+Date: <2017-06-20 Tue>
#+Author: Yogesh Agrawal, Nikhil Bansal
#+Email: yogeshiiith@gmail.com; nikhilbansal3456@gmail.com

* Introduction
  This document describes the steps to build and run Linux Lab on a
  single host machine.
* Design
** Architecture diagram
   [[../arch/linux-lab-architecture-single-host.jpeg]]
** Overview
This article describes the architecture, details and instructions for setting up restricted shell access.

For many CSE related virtual labs, it is a fundamental requirement to provide a way for the user to interact with a
computer. This interaction could be the execution of system command to observe the output, the execution of a
program to see the result or the execution of a program by an evaluation mechanism. It is desirable to make this
interaction imitate a real system interaction as closely as possible. Hence providing a terminal emulator on the
user's browser while taking care of security considerations would be a good solution.

This document is intended for lab developers looking for a way to use the remote shell service and for system
administrators maintaining the infrastructure for restricted shell access.

** Architecture 
The following is the current architecture of the lab :

1. User visits the virtual lab webpage
2. The webpage loads some scripts
3. The script makes a connection to backend 'Gateone' gateway server using WebSockets
4. The gateway server then connects to a backend SSH server via the SSH protocol
5. The gateway server also emulates a terminal to the SSH server
6. The contents of the emulated terminal are sent to the user's web page and get displayed
7. All the user's input is forwarded via the gateway the SSH server
8. For security, there are several limitations put up on the user's account in the restricted shell SSH server
9. The user account information comes from an OpenLDAP server setup separately
10. Accounts on the OpenLDAP server get created when the user registers for virtual labs
11. Home directories for the user's are created on the local machine on which this lab has been setted
  
* Setup
  Following servers are to be setup on a single host. We use
  =Ubuntu-14.04= operating system.

** Linux Lab Server
   1. Set proxy in ~/.bashrc (use =vim ~/.bashrc=) file. (add these
      two line at end of the file .bashrc)
      #+BEGIN_SRC 
      export http_proxy="http://proxy.iiit.ac.in:8080"
      export https_proxy="http://proxy.iiit.ac.in:8080"
      #+END_SRC
   2. Execute ~/.bashrc file:
      #+BEGIN_EXAMPLE
      source ~/.bashrc
      #+END_EXAMPLE
   3. Also set proxy in =/etc/apt/apt.conf= (add these two line at
      end of the file apt.conf)
      #+BEGIN_SRC 
      Acquire::http::Proxy "http://proxy.iiit.ac.in:8080";
      Acquire::https::Proxy "http://proxy.iiit.ac.in:8080";
      #+END_SRC
   4. Update the system.
      #+BEGIN_EXAMPLE
      sudo apt-get update
      #+END_EXAMPLE
   5. Install git, graphviz, php, ldapscripts and php5-ldap
      #+BEGIN_EXAMPLE
      sudo apt-get install git -y
      sudo apt-get install php5 -y
      sudo apt-get install graphviz -y
      sudo apt-get install ldapscripts -y
      sudo apt-get install php5-ldap -y
      #+END_EXAMPLE
      - refer:
        http://www.meso.northwestern.edu/intranet/recipies/useful-computer-files-and-programs/configuring-group-linux-servers-and-terminals-with-ldap-kerberos-and-nfs/ldap-user-and-group-management
   6. Clone the repository : 
      #+BEGIN_EXAMPLE
      git clone https://github.com/Virtual-Labs/linux-lab-iiith.git
      #+END_EXAMPLE
   7. Navigate to src folder and execute make command.
      #+BEGIN_SRC
      cd ~/linux-lab-iiith/src/
      make
      #+END_SRC
   8. Rsync the content of build folder to =/var/www/html/=
      #+BEGIN_SRC 
      sudo rsync -ar ~/linux-lab-iiith/build/ /var/www/html
      #+END_SRC
   9. Configure =/etc/ldapscripts/ldapscripts.conf= as follows: use
      =vim /etc/ldapscripts/ldapscripts.conf= and search following
      lines one by one and comment existing line and add these below
      it.
      #+BEGIN_EXAMPLE
      SERVER=ldap://localhost
      SUFFIX='dc=virtual-labs,dc=ac,dc=in'
      GSUFFIX='ou=Group'
      USUFFIX='ou=People'
      MSUFFIX='ou=Computers'
      BINDDN='cn=admin,dc=virtual-labs,dc=ac,dc=in'
      BINDPWDFILE="/etc/ldapscripts/ldapscripts.passwd"
      GIDSTART="10000"
      UIDSTART="10000"
      MIDSTART="10000"
      #+END_EXAMPLE
   10. Create =ldapscripts.passwd= file as follows:
       #+BEGIN_EXAMPLE
       sudo sh -c "echo -n 'password' > /etc/ldapscripts/ldapscripts.passwd"
       sudo chmod 440 /etc/ldapscripts/ldapscripts.passwd
       #+END_EXAMPLE
   11. Set =USER= directive in =/usr/share/ldapscripts/runtime= as
       follows:
       #+BEGIN_EXAMPLE
       USER=$(whoami 2>/dev/null) // search for this line and edit it to this
       #+END_EXAMPLE
       - refer:
         http://stackoverflow.com/questions/18017311/bash-script-using-ldapscripts-package-does-not-work-from-cron
   12. Add =www-data= user to =root= group so that it can read the
       password file, using
       #+BEGIN_EXAMPLE
       usermod -a -G root www-data
       #+END_EXAMPLE
   13. Restart apache2.
       #+BEGIN_EXAMPLE
       service apache2 restart
       #+END_EXAMPLE

** Gateone Server
   1. Install tornado and python-support
      #+BEGIN_EXAMPLE
      sudo apt-get install python-pip -y
      pip install tornado==2.4.1
      sudo apt-get install python-support -y
      #+END_EXAMPLE
   2. Upgrade =wget= and then download gateone using the following
      command:
      #+BEGIN_SRC
      wget https://github.com/downloads/liftoff/GateOne/gateone_1.1-1_all.deb
      #+END_SRC
   3. Install gateone via dpkg
      #+BEGIN_EXAMPLE
      dpkg -i gateone*.deb
      #+END_EXAMPLE
   4. Navigate inside =/opt/gateone= directory, and execute following
      command:
      #+BEGIN_EXAMPLE
      ./gateone.py
      #+END_EXAMPLE
   5. Terminate the gateone.py : press =ctrl+c=
   6. Edit =/opt/gateone/server.conf=. Change the values of the following Keys :
      #+BEGIN_EXAMPLE
      port = 8000
      origins = <IP>:8000
      #+END_EXAMPLE
      We have used port 8000 for testing purposes you can use any other port >= 1025 and suitable for you
*** Reference
   - https://github.com/liftoff/GateOne/downloads
   - https://www.youtube.com/watch?v=gnVohdlZXVY&list=UU8c7zNWoShUxaFqWKv7H51g&index=3&feature=plpp_video
   - http://liftoff.github.io/GateOne/About/

** Ldap server
   1. Install openldap.
      #+BEGIN_EXAMPLE
      sudo apt-get install slapd ldap-utils -y
      #+END_EXAMPLE
      Answer the following questions?
      #+BEGIN_EXAMPLE
      Enter ldap password: password
      Confirm ldap password: password
      #+END_EXAMPLE
      We have used 'password' as ldap password you can use any other password too  
   2. Reconfigure slapd.
      #+BEGIN_EXAMPLE
      dpkg-reconfigure slapd
      #+END_EXAMPLE
      Use following settings:
      #+BEGIN_EXAMPLE
      Omit OpenLDAP server configuration? No
      DNS domain name: virtual-labs.ac.in
      Organization name? Virtual Labs
      Administrator password: password
      Confirm password: password
      Database backend to use: HDB
      Do you want the database to be removed when slapd is purged? No
      Move old database? Yes
      Allow LDAPv2 protocol ? No
      #+END_EXAMPLE
      refer : [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-a-basic-ldap-server-on-an-ubuntu-12-04-vps]]
   3. Verify that the ldap setup is done properly.
      #+BEGIN_EXAMPLE
      ldapsearch -Y EXTERNAL -H ldapi:// -b 'dc=virtual-labs,dc=ac,dc=in'
      #+END_EXAMPLE
   4. Create organizational units for people and groups using
      following commands:
      #+BEGIN_EXAMPLE
      vim units.ldif // paste the below content in units.ldif and execute below command
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f units.ldif
      #+END_EXAMPLE
      units.ldif file should have following content:
      #+BEGIN_EXAMPLE
      dn: ou=People,dc=virtual-labs,dc=ac,dc=in
      ou: People
      objectClass: organizationalUnit

      dn: ou=Group,dc=virtual-labs,dc=ac,dc=in
      ou: Group
      objectClass: organizationalUnit
      #+END_EXAMPLE
   5. Create a group 'vlusers' for Virtual Labs end users using
      following command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f group.ldif
      #+END_EXAMPLE
      group.ldif should have following content:
      #+BEGIN_EXAMPLE
      dn: cn=vlusers,ou=Group,dc=virtual-labs,dc=ac,dc=in
      cn: vlusers
      gidNumber: 20000
      objectClass: top
      objectClass: posixGroup
      #+END_EXAMPLE
   6. Create a 'testuser' user in 'vlusers' group using following
      command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f testuser1.ldif
      #+END_EXAMPLE
      testuser1.ldif should have following content
      #+BEGIN_EXAMPLE
      dn: uid=testuser1,ou=People,dc=virtual-labs,dc=ac,dc=in
      uid: testuser1
      uidNumber: 20000
      gidNumber: 20000
      cn: Test User 1
      sn: User
      objectClass: top
      objectClass: person
      objectClass: posixAccount
      objectClass: shadowAccount
      loginShell: /bin/bash
      homeDirectory: /home/testuser1
      #+END_EXAMPLE
   7. Make a file in =/var/log/ldapscripts.log= and run following
      commands to change the file permission and change the ownership
      #+BEGIN_EXAMPLE
      touch /var/log/ldapscripts.log
      chmod o-r /var/log/ldapscripts.log
      chown www-data:www-data /var/log/ldapscripts.log
      #+END_EXAMPLE
   8. refer :
      [[https://arthurdejong.org/nss-pam-ldapd/setup]]
** SSH Server
   1. Install libpam-ldapd package
      #+BEGIN_EXAMPLE
      sudo apt-get install libpam-ldap nscd -y
      #+END_EXAMPLE
      Answer the following questions:
      #+BEGIN_EXAMPLE
      IP address / hostname of the LDAP server: <ip-address-of-ldap-server> /// use ldap instead of ldapi
      The search base: dc=virtual-labs,dc=ac,dc=in
      Version of the LDAP connecting to: Version 3
      Configuring LIBNSS-LDAP: OK
      Make root the DB admin: Yes
      DB requires logging in: No
      Root account of LDAP: cn=admin,dc=virtual-labs,dc=ac,dc=in
      Root password: password
      #+END_EXAMPLE
      - refer:
        https://www.digitalocean.com/community/tutorials/how-to-authenticate-client-computers-using-ldap-on-an-ubuntu-12-04-vps
   2. Configure ldap
      #+BEGIN_EXAMPLE
      sudo dpkg-reconfigure ldap-auth-config
      #+END_EXAMPLE
      Answer the following questions:
      #+BEGIN_EXAMPLE
      Should debconf manage LDAP configuration? Yes
      ldap server Uniform Resource Identifier ? <ip-address>
      Distinguished name of the search base: dc=virtual-labs,dc=ac,dc=in
      Ldap version to use? 3
      Make root the DB admin: Yes
      DB requires logging in: No
      Root account of LDAP: cn=admin,dc=virtual-labs,dc=ac,dc=in
      Root password: password
      Local crypt to use when changing passwords: clear
      #+END_EXAMPLE
   3. Modify =/etc/nsswitch.conf= to contain something like this
      #+BEGIN_EXAMPLE
      passwd:         ldap compat
      group:          ldap compat
      shadow:         ldap compat
      hosts:          files dns ldap
      #+END_EXAMPLE
   4. Verify that the ldap server is being reached and everything is
      working fine:
      #+BEGIN_EXAMPLE
      getent passwd
      #+END_EXAMPLE
   5. Enable creating home directories when user logs in. Edit
      =/etc/pam.d/common-session= and add the following line.
      #+BEGIN_EXAMPLE
      session required pam_mkhomedir.so skel=/etc/skel umask=0022
      #+END_EXAMPLE
   6. Run this command to restart nscd
      #+BEGIN_EXAMPLE
      /etc/init.d/nscd restart
      #+END_EXAMPLE

** Final setup
   1. Edit ip address and password of ldap server in
      =/var/www/html/php/ldapexec.php= file as follows:
      #+BEGIN_SRC 
      $ldap_host = "IP"; // Replace IP by IP address of LDAP container
      $ldap_admin_pass = 'password';  // associated password 
      #+END_SRC
   2. Set href to gateone server =https://IP= in
      =/var/www/html/content.html= file.
      #+BEGIN_EXAMPLE
      <a href="https://IP:8000/">here</a>
      #+END_EXAMPLE
   3. Set "src" to gateone server =https://IP= in
      =/var/www/html/exp4/interaction-frame.html= file as follows:
      #+BEGIN_EXAMPLE
      <frame src="https://IP:8000/" />
      #+END_EXAMPLE
   4. Start gateone server
      #+BEGIN_EXAMPLE
      cd /opt/gateone
      ./gateone.py > /dev/null &
      #+END_EXAMPLE
   5. Restart apache
      #+BEGIN_EXAMPLE
      sudo service apache2 restart
      #+END_EXAMPLE
   6. Register using http://IP/php/register-form.php. (replace IP in
      url by =IP= of linux-lab container)
   7. Login using http://IP/php/login-form.php. (replace IP in url by
      =IP= of linux-lab container)
   8. Navigate to http://IP/ to view the lab. Replace =IP= by the =IP=
      of the container of linux-lab or use =ifconfig= to get =IP=.

* Using the lab
  Linux lab is deployed in the testing environment at :
  http://10.4.15.214/index.html

  While performing experiments you can either register or use test
  account: 
  #+BEGIN_EXAMPLE
  username: test 
  password: test​
  #+END_EXAMPLE
  
  When presented with gateone (ssh) console use following details to
  login to shell: 
  #+BEGIN_EXAMPLE
  URL: <ssh-server-ip>
  port: 22
  username: test or <registered-username>
  password: test or <registered-password>​
  #+END_EXAMPLE

* Features to be implemented
  1. Capthca in register
  2. Restricting user root privileges.

* Reference Links
  - https://github.com/Virtual-Labs/documentation-popl-linux-labs/blob/master/documents/POPL-backend-gateone-ldap.pdf 

