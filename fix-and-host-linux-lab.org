#+Title: Efforts for fixing and hosting Linux lab
#+Date: <2016-05-13 Fri>
#+Author: Yogesh Agrawal
#+Email: yogesh@vlabs.ac.in

* Introduction
  This document describes the efforts that are done to fix and host
  Linux Lab.

* Design
** Architecture diagram
   [[images/linux-lab-architecture.jpeg]]
* Setting in host machine for nfs inside openvz containers
** Host Machine
   1. Load nfs and nfsd module
      #+BEGIN_EXAMPLE
      modprobe nfs
      modprobe nfsd
      #+END_EXAMPLE
   2. Setting in /etc/rc.d/rc.local file:
      #+BEGIN_EXAMPLE
      modprobe nfs
      #+END_EXAMPLE
   3. Setting in /etc/sysctl.conf  
      #+BEGIN_EXAMPLE
      kernel.ve_allow_kthreads=1
      #+END_EXAMPLE
   4. refer:
      https://wiki.archlinux.org/index.php/kernel_modules

* Provisioning of servers
  Following containers are created using the
  =ubuntu-12.04-custom-x86_64= template in base4.
  - Use =commands For creating container= for creating any container
** Linux Lab Server
   - Create container
   1. Set proxy in ~/.bashrc (use =vim ~/.bashrc=) file. (add these two line at end of the file .bashrc)
      #+BEGIN_SRC 
      export http_proxy="proxy.iiit.ac.in:8080"
      export https_proxy="proxy.iiit.ac.in:8080"
      #+END_SRC
   2. Also set proxy in =vim /etc/apt/apt.conf= (add these two line at end of the file apt.conf)
      #+BEGIN_SRC 
      Acquire::http::Proxy "http://proxy.iiit.ac.in:8080";
      Acquire::https::Proxy "http://proxy.iiit.ac.in:8080";
      #+END_SRC
   3. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
   4. Clone the lab source code.
      #+BEGIN_EXAMPLE
      git clone https://github.com/Virtual-Labs/linux-lab-iiith.git
      #+END_EXAMPLE
   5. Install graphviz and php.
      #+BEGIN_EXAMPLE
      apt-get install php5
      apt-get install graphviz 
      #+END_EXAMPLE
      Install the dependencies which are not installed. (i.e if the output of =apt-get install graphviz= show some packages install them all using =apt-get install PACKAGE_NAME=)   
   6. Navigate to src folder and execute make command.
      #+BEGIN_SRC 
      cd ~/linux-lab-iiith/src/
      make
      #+END_SRC
   7. Rsync the content of build folder to =/var/www/= directory in case of ubuntu-12.04 else for 14.04 or higher use =var/www/html=
      #+BEGIN_SRC 
      sudo rsync -ar ~/linux-lab-iiith/build/ /var/www
                         OR
      sudo rsync -ar ~/linux-lab-iiith/build/ /var/www.html
      #+END_SRC
   8. Navigate to http://IP/ to view the lab. Replace =IP= by the =IP= of the container of linux-lab or use =ifconfig= to get =IP=.
   9. Install ldapscripts
      #+BEGIN_EXAMPLE
      apt-get install ldapscripts
      #+END_EXAMPLE
      - refer ::
                 http://www.meso.northwestern.edu/intranet/recipies/useful-computer-files-and-programs/configuring-group-linux-servers-and-terminals-with-ldap-kerberos-and-nfs/ldap-user-and-group-management		  
   10. Install php5-ldap package and restart apache2.
       #+BEGIN_EXAMPLE
       apt-get install php5-ldap
       service apache2 restart
       #+END_EXAMPLE
   11. Configure =/etc/ldapscripts/ldapscripts.conf= as follows: use =vim /etc/ldapscripts/ldapscripts.conf= and search following lines one by one and comment existing line and add these below it. 
       #+BEGIN_EXAMPLE
       SERVER=ldap://localhost
       BINDDN='cn=admin,dc=virtual-labs,dc=ac,dc=in'
       BINDPWDFILE="/etc/ldapscripts/ldapscripts.passwd"
       SUFFIX='dc=virtual-labs,dc=ac,dc=in'
       GSUFFIX='ou=Group'
       USUFFIX='ou=People'
       MSUFFIX='ou=Computers'
       GIDSTART=10000
       UIDSTART=10000
       MIDSTART=10000
       #+END_EXAMPLE
   12. Create =ldapscripts.passwd= file as follows:
       #+BEGIN_EXAMPLE
       sudo sh -c "echo -n 'password' > /etc/ldapscripts/ldapscripts.passwd"
       sudo chmod 440 /etc/ldapscripts/ldapscripts.passwd
       #+END_EXAMPLE
   13. edit ip address and password of ldap server in
       =vim /var/www/html/php/ldapexec.php= file like this 
       #+BEGIN_SRC 
       ldap_host = "IP"; // Replace IP by IP address of LDAP container
       $ldap_admin_pass = 'password';  // associated password 
       #+END_SRC
   14. Set =USER= directive in =/usr/share/ldapscripts/runtime= as
       follows:
       #+BEGIN_EXAMPLE
       vim /usr/share/ldapscripts/runtime
       USER=$(whoami 2>/dev/null) // search for this line and edit it to this
       #+END_EXAMPLE
       - refer:
         http://stackoverflow.com/questions/18017311/bash-script-using-ldapscripts-package-does-not-work-from-cron
   15. Add =www-data= user to =root= group and restart apache service
       so that it can read the password file. use these command
       #+BEGIN_EXAMPLE
       usermod -a -G root www-data
       service apache2 restart
       #+END_EXAMPLE
   16. Set src to gateone server =https://IP= in
       =/var/www/exp4/interaction-frame.html= as follows:
       #+BEGIN_EXAMPLE
       <frame src="https://IP/" />
       #+END_EXAMPLE
       Again, replace =IP= by IP of gateone-server (i.e IP of gateone server container if you are using it)
   17. Register using http://IP/php/register-form.php. (replace IP in url by =IP= of linux-lab container)           
   18. Login using http://IP/php/login-form.php. (replace IP in url by =IP= of linux-lab container)
   19. After login enter following credentials a gateone web interface
       will be presented:
       #+BEGIN_EXAMPLE
       host: 10.4.15.216
       port: 22
       User: test
       passwd: test
       #+END_EXAMPLE
       
** GateOne Server
*** Approach 1 (Not working)
   - refer: https://www.digitalocean.com/community/tutorials/how-to-ssh-into-your-vps-from-the-browser-with-gateone
   1. set proxy
   2. apt-get update
   3. apt-get install curl
   4. Download gateone
      #+BEGIN_EXAMPLE
      curl -L http://github.com/liftoff/GateOne/archive/master.tar.gz > ~/gateone.tar.gz
      #+END_EXAMPLE
   5. Extract
      #+BEGIN_EXAMPLE
      tar xvzf ~/gateone.tar.gz -C ~
      #+END_EXAMPLE
   6. Install python libraries
      #+BEGIN_EXAMPLE
      apt-get install python-pip debhelper python-support -y
      #+END_EXAMPLE
   7. Use pip to install extra packages
      #+BEGIN_EXAMPLE
      pip install tornado stdeb
      #+END_EXAMPLE
   8. Create a deb package for GateOne
      #+BEGIN_EXAMPLE
      cd ~/GateOne-master
      python setup.py --command-packages=stdeb.command bdist_deb
      #+END_EXAMPLE

*** Approach 2 (Working)
    - refer: http://liftoff.github.io/GateOne/About/
    - Create container
   1. Set proxy in ~/.bashrc (use =vim ~/.bashrc=) file. (add these two line at end of the file .bashrc)
      #+BEGIN_SRC 
      export http_proxy="proxy.iiit.ac.in:8080"
      export https_proxy="proxy.iiit.ac.in:8080"
      #+END_SRC
   2. Also set proxy in =vim /etc/apt/apt.conf= (add these two line at end of the file apt.conf)
      #+BEGIN_SRC 
      Acquire::http::Proxy "http://proxy.iiit.ac.in:8080";
      Acquire::https::Proxy "http://proxy.iiit.ac.in:8080";
      #+END_SRC
   3. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
    4. install tornado
       #+BEGIN_EXAMPLE
       pip install tornado==2.4.1
       #+END_EXAMPLE
    5. Download gateone from (right click on the given link and click on =copy link location=)
       https://github.com/downloads/liftoff/GateOne/gateone_1.1-1_all.deb and use this for downloading:
       #+BEGIN_SRC 
       wget https://github.com/downloads/liftoff/GateOne/gateone_1.1-1_all.deb
       #+END_SRC
       Upgrade =wget= if required. Use:
       #+BEGIN_EXAMPLE
       sudo apt-get upgrade wget
       #+END_EXAMPLE
    6. Install python-support if not already installed
       #+BEGIN_EXAMPLE
       sudo apt-get install python-support
       #+END_EXAMPLE
    7. Install gateone via dpkg
       #+BEGIN_EXAMPLE
       dpkg -i gateone*.deb
       #+END_EXAMPLE
    8. Navigate inside =/opt/gateone= directory, and execute
       gateone.py.
       #+BEGIN_EXAMPLE
       ./gateone.py
       #+END_EXAMPLE
    9. Now browse https://IP to access gateone server.(Replace =IP= by =IP addr= of gateone-server or gateone container)
*** Reference
   - https://github.com/liftoff/GateOne/downloads
   - https://www.youtube.com/watch?v=gnVohdlZXVY&list=UU8c7zNWoShUxaFqWKv7H51g&index=3&feature=plpp_video
** Ldap server
   - Create container
   1. Set proxy in ~/.bashrc (use =vim ~/.bashrc=) file. (add these two line at end of the file .bashrc)
      #+BEGIN_SRC 
      export http_proxy="proxy.iiit.ac.in:8080"
      export https_proxy="proxy.iiit.ac.in:8080"
      #+END_SRC
   2. Also set proxy in =vim /etc/apt/apt.conf= (add these two line at end of the file apt.conf)
      #+BEGIN_SRC 
      Acquire::http::Proxy "http://proxy.iiit.ac.in:8080";
      Acquire::https::Proxy "http://proxy.iiit.ac.in:8080";
      #+END_SRC
   3. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
   4. Install openldap.
      #+BEGIN_EXAMPLE
      apt-get install slapd ldap-utils
      #+END_EXAMPLE
   5. Reconfigure slapd.
      #+BEGIN_EXAMPLE
      dpkg-reconfigure slapd
      #+END_EXAMPLE
      Use following settings:
      #+BEGIN_EXAMPLE
      Omit OpenLDAP server configuration? No
      DNS domain name: virtual-labs.ac.in
      Organization name? Virtual Labs
      Administrator password: password
      Confirm password: password
      Database backend to use: HDB
      Do you want the database to be removed when slapd is purged? No
      #+END_EXAMPLE
      refer : [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-a-basic-ldap-server-on-an-ubuntu-12-04-vps]]
   6. Verify that the ldap setup is done properly.
      #+BEGIN_EXAMPLE
      ldapsearch -Y EXTERNAL -H ldapi:// -b 'dc=virtual-labs,dc=ac,dc=in'
      #+END_EXAMPLE
   7. Create organizational units for people and groups using
      following commands:
      #+BEGIN_EXAMPLE
      vim units.ldif // paste the below content in units.ldif and execute below command
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f units.ldif
      #+END_EXAMPLE
      units.ldif file should have following content:
      #+BEGIN_EXAMPLE
      dn: ou=People,dc=virtual-labs,dc=ac,dc=in
      ou: People
      objectClass: organizationalUnit

      dn: ou=Group,dc=virtual-labs,dc=ac,dc=in
      ou: Group
      objectClass: organizationalUnit
      #+END_EXAMPLE
   8. Create a group 'vlusers' for Virtual Labs end users using
      following command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f group.ldif
      #+END_EXAMPLE
      group.ldif should have following content:
      #+BEGIN_EXAMPLE
      dn: cn=vlusers,ou=Group,dc=virtual-labs,dc=ac,dc=in
      cn: vlusers
      gidNumber: 20000
      objectClass: top
      objectClass: posixGroup
      #+END_EXAMPLE
   9. Create a 'testuser' user in 'vlusers' group using following
      command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f testuser1.ldif
      #+END_EXAMPLE
      testuser1.ldif should have following content
      #+BEGIN_EXAMPLE
      dn: uid=testuser1,ou=People,dc=virtual-labs,dc=ac,dc=in
      uid: testuser1
      uidNumber: 20000
      gidNumber: 20000
      cn: Test User 1
      sn: User
      objectClass: top
      objectClass: person
      objectClass: posixAccount
      objectClass: shadowAccount
      loginShell: /bin/bash
      homeDirectory: /home/testuser1
      #+END_EXAMPLE
   10. refer :
       [[https://arthurdejong.org/nss-pam-ldapd/setup]]
** SSH Server
   -create container  
   1. before starting the container and entering into it (i.e after using =ssh username@IP= and then =sudo su=)  
      Turn on nfs
      #+BEGIN_EXAMPLE
      vzctl set $CTID --features "nfs:on" --save
      #+END_EXAMPLE
      =CTID= is ID of this container
   2. Enter into the container
   3. Set proxy in ~/.bashrc (use =vim ~/.bashrc=) file. (add these two line at end of the file .bashrc)
      #+BEGIN_SRC 
      export http_proxy="proxy.iiit.ac.in:8080"
      export https_proxy="proxy.iiit.ac.in:8080"
      #+END_SRC
   4. Also set proxy in =vim /etc/apt/apt.conf= (add these two line at end of the file apt.conf)
      #+BEGIN_SRC 
      Acquire::http::Proxy "http://proxy.iiit.ac.in:8080";
      Acquire::https::Proxy "http://proxy.iiit.ac.in:8080";
      #+END_SRC
   5. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
   6. apt-get update
   7. Install libpam-ldapd package
      #+BEGIN_EXAMPLE
      apt-get install libpam-ldap nscd
      #+END_EXAMPLE
      Answer the following questions:
      #+BEGIN_EXAMPLE
      IP address / hostname of the LDAP server: <ip-address-of-ldap-server> /// use ldap instead of ldapi
      The search base: dc=virtual-labs,dc=ac,dc=in
      Version of the LDAP connecting to: Version 3
      Configuring LIBNSS-LDAP: OK
      Make root the DB admin: Yes
      DB requires logging in: No
      Root account of LDAP: cn=admin,dc=virtual-labs,dc=ac,dc=in
      Root password: password
      #+END_EXAMPLE
      - refer:
        https://www.digitalocean.com/community/tutorials/how-to-authenticate-client-computers-using-ldap-on-an-ubuntu-12-04-vps
   8. Modify =/etc/nsswitch.conf= to contain something like this
      #+BEGIN_EXAMPLE
      passwd:         ldap compat
      group:          ldap compat
      shadow:         ldap compat
      hosts:          files dns ldap
      #+END_EXAMPLE
   9. Verify that the ldap server is being reached and everything is
      working fine:
      #+BEGIN_EXAMPLE
      getent passwd
      #+END_EXAMPLE
   10. Enable creating home directories when user logs in. Edit
      =/etc/pam.d/common-session= and =add= the following line.
      #+BEGIN_EXAMPLE
      session required pam_mkhomedir.so skel=/etc/skel umask=0022
      #+END_EXAMPLE
   11. Install nfs client
      #+BEGIN_EXAMPLE
      apt-get install nfs-common
      #+END_EXAMPLE
   12. Edit =/etc/fstab= and =add= the following line (with proper server
      address)
      #+BEGIN_EXAMPLE
      IP:/var/export/nfs4/home /home nfs defaults,nolock 0 1 
      #+END_EXAMPLE
      Replace =IP= by =IP= of nfs-server (i.e nfs container)
   13. Mount the filesystem now
       #+BEGIN_EXAMPLE
       mount -a
       #+END_EXAMPLE
       or using
       #+BEGIN_EXAMPLE
       $ mount -t nfs 10.4.15.219:/var/export/nfs4/home /home -o nolock
       #+END_EXAMPLE

** NFS Server
   To setup nfs server following steps are done:
    - create container 
   1. Before entering the container do: 
      Turn on nfsd feature
      #+BEGIN_EXAMPLE
      vzctl set $CTID --feature nfsd:on --save
      #+END_EXAMPLE
      Replace CTID with nfs-container id
   2. Set quotaugidlimit
      #+BEGIN_EXAMPLE
      vzctl set CTID --quotaugidlimit 10000 --save
      #+END_EXAMPLE
      Replace CTID with nfs-container id
   3. Start the container and set proxy.
   4. apt-get update
   5. Install nfs kernel
      #+BEGIN_EXAMPLE      
      apt-get install nfs-kernel-server rpcbind -y
      #+END_EXAMPLE
   6. Create directory
      #+BEGIN_EXAMPLE
      mkdir -p /var/export/nfs4/home
      #+END_EXAMPLE
   7. Edit =/etc/exports= and =add= the following lines, replace
      <ip-address> with the ip of the shell server (i.e IP of SSH container)
      #+BEGIN_EXAMPLE
      /var/export/nfs4 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      /var/export/nfs4/home 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      #+END_EXAMPLE
   8. Refresh the export list
      #+BEGIN_EXAMPLE
      $ exportfs -rav // output should like the next two lines
      exporting 10.4.15.0/24:/var/export/nfs4/home
      exporting 10.4.15.0/24:/var/export/nfs4
      #+END_EXAMPLE
   9. Restart nfs kernel and portmap
      #+BEGIN_EXAMPLE
      service portmap restart
      service nfs-kernel-server restart
      #+END_EXAMPLE
   10. refer: https://help.ubuntu.com/community/SettingUpNFSHowTo
*** Setting quota
    Quota is to be set inside the NFS server machine. Below steps
    describes how to setup quota tool.
    1. Install quota tools
       #+BEGIN_EXAMPLE
       apt-get install quota quotatool
       #+END_EXAMPLE
    2. Add a line in =/etc/fstab= file as follows:
       #+BEGIN_EXAMPLE
       /dev/simfs /	  simfs   rw,gid=5,mode=620,usrquota,grpquota    0    0
       #+END_EXAMPLE
    3. Restart the container
       #+BEGIN_EXAMPLE
       $ vzctl restart ctid
       #+END_EXAMPLE
    4. Remove any aquota.group and aquota.user files if present inside
       /root directory.
       #+BEGIN_EXAMPLE
       rm -rf /aquota.group /aquota.user
       #+END_EXAMPLE
    5. Do quotacheck
       #+BEGIN_EXAMPLE
       $ quotaoff
       $ quotacheck -cum /
       #+END_EXAMPLE
    6. Enable quota
       #+BEGIN_EXAMPLE
       $ quotaon /
       #+END_EXAMPLE
       - Note :: To disable quota you can do.
               	 #+BEGIN_EXAMPLE
	       	 quotaoff -a
               	 #+END_EXAMPLE
    7. Configure quota for different user
       #+BEGIN_EXAMPLE
       edquota root
       #+END_EXAMPLE
    8. Check quota for a user
       #+BEGIN_EXAMPLE
       quota root
       #+END_EXAMPLE
    9. Generate report for different quota
       #+BEGIN_EXAMPLE
       repquota -a
       #+END_EXAMPLE
    10. Refer the [[https://github.com/Virtual-Labs/documentation-popl-linux-labs/blob/master/POPL-backend-gateone-ldap.pdf][pdf document]], the quota is to be setup of
        vlusers. As NFS server is not ldap clients groups created in
        ldap is not visible here.
    11. refer: 
	- https://wiki.openvz.org/User_Guide/Managing_Resources#Turning_On_and_Off_Second-Level_Quotas_for_Container
	- https://www.digitalocean.com/community/tutorials/how-to-enable-user-and-group-quotas
* Troubleshooting
** Php errors
   To troubleshoot php errors add following lines in php to debug the
   error:
   #+BEGIN_EXAMPLE
   ini_set('display_errors', 1);
   ini_set('display_startup_errors', 1);
   error_reporting(E_ALL);
   #+END_EXAMPLE
** Testing the NFS mount
   Once you have successfully mounted NFS directory, we can test that
   it works by creating a file on the client and checking its
   availability on the server.
   #+BEGIN_EXAMPLE
   $ touch /home/a.txt
   #+END_EXAMPLE
** NFS server (Centos)
   1. Create a centos container.
   2. Set proxy in /etc/yum.conf
      #+BEGIN_EXAMPLE
      http_proxy=http://proxy.iiit.ac.in:8080
      #+END_EXAMPLE
   3. Turn on nfsd feature
      #+BEGIN_EXAMPLE
      vzctl set $CTID --feature nfsd:on --save      
      #+END_EXAMPLE
   4. Do yum update
      #+BEGIN_EXAMPLE
      yum update
      #+END_EXAMPLE
   5. Install nfs utils
      #+BEGIN_EXAMPLE
      yum install nfs-utils nfs-utils-lib
      #+END_EXAMPLE
   6. Disable NFSv4 and nfsd module loading warnings in
      /etc/sysconfig/nfs by uncommenting the following lines:
      #+BEGIN_EXAMPLE
      MOUNTD_NFS_V3="yes"
      RPCNFSDARGS="-N 4"
      NFSD_MODULE="noload"  
      #+END_EXAMPLE
   7. Run services
      #+BEGIN_EXAMPLE
      chkconfig nfs on 
      chkconfig rpcbind on
      service rpcbind start
      service nfs start
      #+END_EXAMPLE
   8. Write /etc/exports
      #+BEGIN_EXAMPLE
      /var/export/nfs4 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      /var/export/nfs4/home 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      #+END_EXAMPLE
   9. Export them
      #+BEGIN_EXAMPLE
      exportfs -rav
      #+END_EXAMPLE
   10. refer:
       - https://openvz.org/NFS
       - https://openvz.org/NFS_server_inside_container
       - https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-centos-6

* Using the lab
  Linux lab is deployed in the testing environment at :
  http://10.4.15.214/index.html

  While performing experiments you can either register or use test
  account: 
  #+BEGIN_EXAMPLE
  username: test 
  password: test​
  #+END_EXAMPLE
  
  When presented with gateone (ssh) console use following details to
  login to shell: 
  #+BEGIN_EXAMPLE
  URL: <ssh-server-ip>
  port: 22
  username: test or <registered-username>
  password: test or <registered-password>​
  #+END_EXAMPLE

* Features to be implemented
  1. Capthca in register
  2. Restricting user root privileges using "chroot jail".

* Reference Links
  - https://github.com/Virtual-Labs/documentation-popl-linux-labs/blob/master/documents/POPL-backend-gateone-ldap.pdf 

* commands For creating container
   1. =UID= is the user ID of the LDAP account
   2. =IP= is the ip-addr of base4 machine
   3. It will ask for your LDAP-account password
      #+BEGIN_SRC 
      ssh UID@IP
      #+END_SRC

   4. Use this command to have superuser privileges
      #+BEGIN_SRC 
      sudo su
      #+END_SRC
   5. Before starting to create a Container, you shall decide on which OS template your Container will be based.
   6. There might be several OS templates installed on the Hardware Node and prepared for the Container creation
   7. use the following command to find out what  OS templates are available on your system:
      #+BEGIN_SRC 
      ls /vz/template/cache/   
      #+END_SRC
   8. After the Container ID and the installed OS template have been chosen
   9. for choosing CTID(container-ID) use =vzlist -a= and choose the available container id
   10. After that choose the ipadd for container use =ping IP= ( where replace IP by any valid IP addr). 
   11. If the output shows =Destination Host Unreachable= again and again then use this IP.
   
   12. For creating container use :
       #+BEGIN_SRC 
       vzctl create CTID --ostemplate ubuntu-12.04-custom-x86_64 --ipadd IP --hostname NAME_OF_THE_CONTAINER
       #+END_SRC
   13. Replace CTID by container-ID, IP by chosen IP address, NAME_OF_THE_CONTAINER by the container name (can be anything)
   14. use =vzctl start CTID= to start container.
   15. use =vzctl enter CTID= to enter into the container.
