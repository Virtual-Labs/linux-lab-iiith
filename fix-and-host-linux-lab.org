#+Title: Efforts for fixing and hosting Linux lab
#+Date: <2016-05-13 Fri>
#+Author: Yogesh Agrawal
#+Email: yogesh@vlabs.ac.in

* Introduction
  This document describes the efforts that are done to fix and host
  Linux Lab.

* Design
** Design diagram
   [[images/linux-lab-architecture.png]]

* Provisioning of servers
  Following containers are created using the
  =ubuntu-12.04-custom-x86_64= template in base4.
** Linux Lab Server
   1. Set proxy in ~/.bashrc file.
   2. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
   3. Clone the lab source code.
      #+BEGIN_EXAMPLE
      git clone https://github.com/Virtual-Labs/linux-lab-iiith.git
      #+END_EXAMPLE
   4. Install graphviz and php.
      #+BEGIN_EXAMPLE
      apt-get install graphviz php5
      #+END_EXAMPLE
   5. Navigate to src folder and execute make command.
   6. Rsync the content of build folder to =/var/www= directory.
   7. Navigate to http://10.4.15.214/ to view the lab.
   8. Install ldapscripts
      #+BEGIN_EXAMPLE
      apt-get install ldapscripts
      #+END_EXAMPLE
      - refer ::
                 http://www.meso.northwestern.edu/intranet/recipies/useful-computer-files-and-programs/configuring-group-linux-servers-and-terminals-with-ldap-kerberos-and-nfs/ldap-user-and-group-management		  
   9. Install php5-ldap package and restart apache2.
      #+BEGIN_EXAMPLE
      apt-get install php5-ldap
      service apache2 restart
      #+END_EXAMPLE
   10. Configure =/etc/ldapscripts/ldapscripts.conf= as follows:
       #+BEGIN_EXAMPLE
       SERVER=localhost
       BINDDN='cn=admin,dc=example,dc=com'
       BINDPWDFILE="/etc/ldapscripts/ldapscripts.passwd"
       SUFFIX='dc=example,dc=com'
       GSUFFIX='ou=Group'
       USUFFIX='ou=People'
       MSUFFIX='ou=Computers'
       GIDSTART=10000
       UIDSTART=10000
       MIDSTART=10000
       #+END_EXAMPLE
   11. Create =ldapscripts.passwd= file as follows:
       #+BEGIN_EXAMPLE
       sudo sh -c "echo -n 'password' > /etc/ldapscripts/ldapscripts.passwd"
       sudo chmod 400 /etc/ldapscripts/ldapscripts.passwd
       #+END_EXAMPLE
   12. Set ip address and password of ldap server in
       /var/www/php/ldapexec.php file.
   13. Set =USER= directive in =/usr/share/ldapscripts/runtime= as
       follows:
       #+BEGIN_EXAMPLE
       USER=$(whoami 2>/dev/null)
       #+END_EXAMPLE
       - refer:
         http://stackoverflow.com/questions/18017311/bash-script-using-ldapscripts-package-does-not-work-from-cron
   14. Grant read privileges to ldapscripts.passwd file.
       #+BEGIN_EXAMPLE
       chmod 440 ldapscripts.passwd
       #+END_EXAMPLE
   15. Add =www-data= user to =root= group and restart apache service
       so that it can read the password file.
       #+BEGIN_EXAMPLE
       usermod -a -G root www-data
       service apache2 restart
       #+END_EXAMPLE
   16. Set src to gateone server =https://10.4.15.215= in
       =/var/www/exp4/interaction-frame.html= as follows:
       #+BEGIN_EXAMPLE
       <frame src="https://10.4.15.215/" />
       #+END_EXAMPLE
   17. Register using http://10.4.15.214/php/register-form.php.           
   18. Login using http://10.4.15.214/php/login-form.php.
   19. After login enter following credentials a gateone web interface
       will be presented:
       #+BEGIN_EXAMPLE
       host: 10.4.15.216
       port: 22
       User: test
       passwd: test
       #+END_EXAMPLE
       
** GateOne Server
*** Approach 1 (Not working)
   - refer: https://www.digitalocean.com/community/tutorials/how-to-ssh-into-your-vps-from-the-browser-with-gateone
   1. set proxy
   2. apt-get update
   3. apt-get install curl
   4. Download gateone
      #+BEGIN_EXAMPLE
      curl -L http://github.com/liftoff/GateOne/archive/master.tar.gz > ~/gateone.tar.gz
      #+END_EXAMPLE
   5. Extract
      #+BEGIN_EXAMPLE
      tar xvzf ~/gateone.tar.gz -C ~
      #+END_EXAMPLE
   6. Install python libraries
      #+BEGIN_EXAMPLE
      apt-get install python-pip debhelper python-support -y
      #+END_EXAMPLE
   7. Use pip to install extra packages
      #+BEGIN_EXAMPLE
      pip install tornado stdeb
      #+END_EXAMPLE
   8. Create a deb package for GateOne
      #+BEGIN_EXAMPLE
      cd ~/GateOne-master
      python setup.py --command-packages=stdeb.command bdist_deb
      #+END_EXAMPLE

*** Approach 2 (Working)
    - refer: http://liftoff.github.io/GateOne/About/
    1. install tornado
       #+BEGIN_EXAMPLE
       pip install tornado==2.4.1
       #+END_EXAMPLE
    2. Download gateone from
       https://github.com/downloads/liftoff/GateOne/gateone_1.1-1_all.deb
    3. Install gateone via dpkg
       #+BEGIN_EXAMPLE
       dpkg -i gateone*.deb
       #+END_EXAMPLE
    4. Navigate inside =/opt/gateone= directory, and execute
       gateone.py.
       #+BEGIN_EXAMPLE
       ./gateone.py
       #+END_EXAMPLE
    5. Now browse https://10.4.15.215 to access gateone server.
*** Reference
   - https://github.com/liftoff/GateOne/downloads
   - https://www.youtube.com/watch?v=gnVohdlZXVY&list=UU8c7zNWoShUxaFqWKv7H51g&index=3&feature=plpp_video
** Ldap server
   1. set proxy
   2. Update the system.
      #+BEGIN_EXAMPLE
      apt-get update
      #+END_EXAMPLE
   3. Install openldap.
      #+BEGIN_EXAMPLE
      apt-get install slapd ldap-utils
      #+END_EXAMPLE
   4. Reconfigure slapd.
      #+BEGIN_EXAMPLE
      dpkg-reconfigure slapd
      #+END_EXAMPLE
      Use following settings:
      #+BEGIN_EXAMPLE
      Omit OpenLDAP server configuration? No
      DNS domain name: virtual-labs.ac.in
      Organization name? Virtual Labs
      Administrator password: password
      Confirm password: password
      Database backend to use: HDB
      Do you want the database to be removed when slapd is purged? No
      #+END_EXAMPLE
   5. Verify that the ldap setup is done properly.
      #+BEGIN_EXAMPLE
      ldapsearch -Y EXTERNAL -H ldapi:// -b 'dc=virtual-labs,dc=ac,dc=in'
      #+END_EXAMPLE
   6. Create organizational units for people and groups using
      following command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f units.ldif
      #+END_EXAMPLE
      units.ldif file should have following content:
      #+BEGIN_EXAMPLE
      dn: ou=People,dc=virtual-labs,dc=ac,dc=in
      ou: People
      objectClass: organizationalUnit
      dn: ou=Group,dc=virtual-labs,dc=ac,dc=in
      ou: Group
      objectClass: organizationalUnit
      #+END_EXAMPLE
   7. Create a group 'vlusers' for Virtual Labs end users using
      following command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f group.ldif
      #+END_EXAMPLE
      group.ldif should have following content:
      #+BEGIN_EXAMPLE
      dn: cn=vlusers,ou=Group,dc=virtual-labs,dc=ac,dc=in
      cn: vlusers
      gidNumber: 20000
      objectClass: top
      objectClass: posixGroup
      #+END_EXAMPLE
   8. Create a 'testuser' user in 'vlusers' group using following
      command:
      #+BEGIN_EXAMPLE
      ldapadd -x -D 'cn=admin,dc=virtual-labs,dc=ac,dc=in' -W -f testuser1.ldif
      #+END_EXAMPLE
      testuser1.ldif should have following content
      #+BEGIN_EXAMPLE
      dn: uid=testuser1,ou=People,dc=virtual-labs,dc=ac,dc=in
      uid: testuser1
      uidNumber: 20000
      gidNumber: 20000
      cn: Test User 1
      sn: User
      objectClass: top
      objectClass: person
      objectClass: posixAccount
      objectClass: shadowAccount
      loginShell: /bin/bash
      homeDirectory: /home/testuser1
      #+END_EXAMPLE
    
** SSH Server
   1. Turn on nfs
      #+BEGIN_EXAMPLE
      vzctl set $CTID --features "nfs:on" --save
      #+END_EXAMPLE
   2. set proxy
   3. apt-get update
   4. Install libpam-ldapd package
      #+BEGIN_EXAMPLE
      apt-get install libpam-ldapd
      #+END_EXAMPLE
      Answer the following questions:
      #+BEGIN_EXAMPLE
      IP address / hostname of the LDAP server: <ip-address-of-ldap-server>
      The search base: dc=virtual-labs,dc=ac,dc=in
      Version of the LDAP connecting to: Version 3
      Configuring LIBNSS-LDAP: OK
      Make root the DB admin: Yes
      DB requires logging in: No
      Root account of LDAP: cn=admin,dc=virtual-labs,dc=ac,dc=in
      Root password: password
      #+END_EXAMPLE
   5. Modify =/etc/nsswitch.conf= to contain something like this
      #+BEGIN_EXAMPLE
      passwd:         compat ldap
      group:          compat ldap
      shadow:         compat ldap
      hosts:          files dns ldap
      #+END_EXAMPLE
   6. Verify that the ldap server is being reached and everything is
      working fine:
      #+BEGIN_EXAMPLE
      getent passwd
      #+END_EXAMPLE
   7. Enable creating home directories when user logs in. Edit
      =/etc/pam.d/common-session= and add the following line.
      #+BEGIN_EXAMPLE
      session required pam_mkhomedir.so skel=/etc/skel umask=0022
      #+END_EXAMPLE
   8. Install nfs client
      #+BEGIN_EXAMPLE
      apt-get install nfs-common
      #+END_EXAMPLE
   9. Edit =/etc/fstab= and the following line (with proper server
      address)
      #+BEGIN_EXAMPLE
      10.4.15.219:/var/export/nfs4/home /home nfs defaults,nolock 0 1
      #+END_EXAMPLE
   10. Mount the filesystem now
       #+BEGIN_EXAMPLE
       mount -a
       #+END_EXAMPLE
       or using
       #+BEGIN_EXAMPLE
       $ mount -t nfs 10.4.15.219:/var/export/nfs4/home /home -o nolock
       #+END_EXAMPLE

** NFS Server
   To setup nfs server following steps are done:
   1. Turn on nfsd feature
      #+BEGIN_EXAMPLE
      vzctl set $CTID --feature nfsd:on --save
      #+END_EXAMPLE
   2. set proxy
   3. apt-get update
   4. Install nfs kernel
      #+BEGIN_EXAMPLE      
      apt-get install nfs-kernel-server rpcbind -y
      #+END_EXAMPLE
   5. Create directory
      #+BEGIN_EXAMPLE
      mkdir -p /var/export/nfs4/home
      #+END_EXAMPLE
   6. Edit =/etc/exports= and add the following lines, replace
      <ip-address> with the ip of the shell server.
      #+BEGIN_EXAMPLE
      /var/export/nfs4 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      /var/export/nfs4/home 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      #+END_EXAMPLE
   7. Refresh the export list
      #+BEGIN_EXAMPLE
      $ exportfs -rav
      exporting 10.4.15.0/24:/var/export/nfs4/home
      exporting 10.4.15.0/24:/var/export/nfs4
      #+END_EXAMPLE
   8. Restart nfs kernel and portmap
      #+BEGIN_EXAMPLE
      service portmap restart
      service nfs-kernel-server restart
      #+END_EXAMPLE
   9. refer: https://help.ubuntu.com/community/SettingUpNFSHowTo
* Setting nfs in openvz containers
** Host
   1. Load nfs and nfsd module
      #+BEGIN_EXAMPLE
      modprobe nfs
      modprobe nfsd
      #+END_EXAMPLE
   2. Setting in /etc/rc.d/rc.local file:
      #+BEGIN_EXAMPLE
      modprobe nfs
      #+END_EXAMPLE
   3. Setting in /etc/sysctl.conf  
      #+BEGIN_EXAMPLE
      kernel.ve_allow_kthreads=1
      #+END_EXAMPLE
   4. refer:
      https://wiki.archlinux.org/index.php/kernel_modules

* Setting quota
  1. Set quotaugidlimit
     #+BEGIN_EXAMPLE
     vzctl set 101 --quotaugidlimit 100 --save
     #+END_EXAMPLE
  2. Install tools
     #+BEGIN_EXAMPLE
     apt-get install quota quotatool
     #+END_EXAMPLE
  3. refer: https://wiki.openvz.org/User_Guide/Managing_Resources
* Troubleshooting
** Php errors
   To troubleshoot php errors add following lines in php to debug the
   error:
   #+BEGIN_EXAMPLE
   ini_set('display_errors', 1);
   ini_set('display_startup_errors', 1);
   error_reporting(E_ALL);
   #+END_EXAMPLE
** Testing the NFS mount
   Once you have successfully mounted NFS directory, we can test that
   it works by creating a file on the client and checking its
   availability on the server.
   #+BEGIN_EXAMPLE
   $ touch /home/a.txt
   #+END_EXAMPLE
** NFS server (Centos)
   1. Create a centos container.
   2. Set proxy in /etc/yum.conf
      #+BEGIN_EXAMPLE
      http_proxy=http://proxy.iiit.ac.in:8080
      #+END_EXAMPLE
   3. Turn on nfsd feature
      #+BEGIN_EXAMPLE
      vzctl set $CTID --feature nfsd:on --save      
      #+END_EXAMPLE
   4. Do yum update
      #+BEGIN_EXAMPLE
      yum update
      #+END_EXAMPLE
   5. Install nfs utils
      #+BEGIN_EXAMPLE
      yum install nfs-utils nfs-utils-lib
      #+END_EXAMPLE
   6. Disable NFSv4 and nfsd module loading warnings in
      /etc/sysconfig/nfs by uncommenting the following lines:
      #+BEGIN_EXAMPLE
      MOUNTD_NFS_V3="yes"
      RPCNFSDARGS="-N 4"
      NFSD_MODULE="noload"  
      #+END_EXAMPLE
   7. Run services
      #+BEGIN_EXAMPLE
      chkconfig nfs on 
      chkconfig rpcbind on
      service rpcbind start
      service nfs start
      #+END_EXAMPLE
   8. Write /etc/exports
      #+BEGIN_EXAMPLE
      /var/export/nfs4 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      /var/export/nfs4/home 10.4.15.0/24(rw,sync,no_subtree_check,no_root_squash)
      #+END_EXAMPLE
   9. Export them
      #+BEGIN_EXAMPLE
      exportfs -rav
      #+END_EXAMPLE
   10. refer:
       - https://openvz.org/NFS
       - https://openvz.org/NFS_server_inside_container
       - https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-centos-6

* Using the lab
  Linux lab is deployed in the testing environment at :
  http://10.4.15.214/index.html

  While performing experiments you can either register or use test
  account: 
  #+BEGIN_EXAMPLE
  username: test 
  password: test​
  #+END_EXAMPLE
  
  When presented with gateone (ssh) console use following details to
  login to shell: 
  #+BEGIN_EXAMPLE
  URL: 10.4.15.216
  port: 22
  username: test or <registered-username>
  password: test or <registered-password>​
  #+END_EXAMPLE

* Features to be implemented
  1. Capthca in register
  2. Restricting user root privileges using "chroot jail".

* Reference Links
  - https://github.com/Virtual-Labs/documentation-popl-linux-labs/blob/master/documents/POPL-backend-gateone-ldap.pdf 
